{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","purchasePrice","setPurchasePrice","downPamentPercent","setDownPaymentPercent","ammortizationPeriod","setAmmortizationPeriod","mortgageRate","setMortgageRate","annualPropertyTaxes","setAnnualPropertyTaxes","strataFees","setStrataFees","annualMaintenance","setAnnualMaintenance","annualGrowthRate","setAnnualGrowthRate","realtorCommissionPercent","setRealtorCommissionPercent","investmentReturnPercentage","setInvestmentReturnPercentage","comparableMonthlyRent","setComparableMonthlyRent","yearsToRun","setYearsToRun","data","setData","annualHouseExpense","setAnnualHouseExpense","annualRent","setAnnualRent","investmentDelta","setInvestmentDelta","drawdownRate","currencyFormatter","Intl","NumberFormat","style","currency","handleChange","setter","event","target","value","useEffect","console","log","downpayment","mortgage","mortgageRateDec","annualMortgagePayment","Math","pow","tmpAnnualHouseExpense","i","tmpInvestmentDelta","map","drawdown","currHousePrice","currInvestmentEquity","newData","remainingLoanBalance","currHouseEquity","push","name","investmentNetEquity","round","homeNetEquity","regenerateCharts","className","Container","Row","Col","type","onChange","Tabs","index","Tab","eventKey","title","width","height","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09174414.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect, useState} from 'react';\nimport {Col, Container, Row, Tab, Tabs} from \"react-bootstrap\";\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip} from 'recharts';\n\nfunction App() {\n\n  const [purchasePrice, setPurchasePrice] = useState(650000),\n    [downPamentPercent, setDownPaymentPercent] = useState(20.0),\n    [ammortizationPeriod, setAmmortizationPeriod] = useState(25),\n    [mortgageRate, setMortgageRate] = useState(2.0),\n    [annualPropertyTaxes, setAnnualPropertyTaxes] = useState(2000),\n    [strataFees, setStrataFees] = useState(750),\n    [annualMaintenance, setAnnualMaintenance] = useState(1000),\n    [annualGrowthRate, setAnnualGrowthRate] = useState(0.0),\n    \n    // resale\n    [realtorCommissionPercent, setRealtorCommissionPercent] = useState(6.0),\n    \n    // opportunity cost\n    [investmentReturnPercentage, setInvestmentReturnPercentage] = useState(5.0),\n    \n    // rental comparison\n    [comparableMonthlyRent, setComparableMonthlyRent] = useState(2400),\n\n    // analysis\n    [yearsToRun, setYearsToRun] = useState(20),\n\n    // results\n    [data, setData] = useState([[]]),\n    [annualHouseExpense, setAnnualHouseExpense] = useState(0.0),\n    [annualRent, setAnnualRent] = useState(0.0),\n    [investmentDelta, setInvestmentDelta] = useState(0.0);\n\n  const drawdownRate = [1, 0.95, 0.9, 0.8, 0.7];\n  const currencyFormatter = new Intl.NumberFormat('en-US',\n      {style: 'currency', currency: 'USD'});\n  const handleChange = setter => event => setter(event.target.value);\n\n  function regenerateCharts() {\n    console.log(\"regenerating chart data, annual taxes:\", annualPropertyTaxes);\n    const downpayment = purchasePrice * (downPamentPercent/100.0);\n\n    const mortgage = (purchasePrice - downpayment);\n    const mortgageRateDec = mortgageRate/100.0;\n    // https://www.mtgprofessor.com/formulas.htm\n    const annualMortgagePayment = mortgage * (mortgageRateDec * Math.pow(1 + mortgageRateDec, ammortizationPeriod)) /\n        (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - 1);\n\n    let tmpAnnualHouseExpense = (12 * strataFees) + annualMaintenance + annualMortgagePayment + annualPropertyTaxes;\n    console.log(\"annual house expense: \", tmpAnnualHouseExpense, annualPropertyTaxes, (12 * strataFees),\n        annualMaintenance, annualMortgagePayment);\n    setAnnualHouseExpense(tmpAnnualHouseExpense);\n    setAnnualRent(12 * comparableMonthlyRent);\n    let tmpInvestmentDelta = tmpAnnualHouseExpense - (12*comparableMonthlyRent);\n    setInvestmentDelta(tmpInvestmentDelta);\n\n    //let newData = [];\n    let i;\n    setData(drawdownRate.map(drawdown => {\n      let currHousePrice = purchasePrice * drawdown;\n      let currInvestmentEquity = downpayment;\n      let newData = [];\n      for (i = 1; i < yearsToRun; i++) {\n        currHousePrice = currHousePrice * (1.0 + (annualGrowthRate/100.0));\n\n        // https://www.mtgprofessor.com/formulas.htm\n        const remainingLoanBalance = mortgage\n            * (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - Math.pow(1 + mortgageRateDec, i))\n            / (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - 1);\n        currInvestmentEquity = (currInvestmentEquity + tmpInvestmentDelta) * (1.0 + (investmentReturnPercentage/100.0));\n\n        let currHouseEquity = (currHousePrice - remainingLoanBalance) -\n            (currHousePrice * realtorCommissionPercent / 100.0);\n\n        newData.push({\n          name: i,\n          investmentNetEquity: Math.round(currInvestmentEquity/1000),\n          homeNetEquity: Math.round(currHouseEquity/1000)\n        });\n      }\n      return newData;\n    }));\n  };\n\n  useEffect(() => {\n    regenerateCharts();\n  }, [purchasePrice, ammortizationPeriod, mortgageRate, annualPropertyTaxes, strataFees, annualMaintenance,\n  realtorCommissionPercent, investmentReturnPercentage, comparableMonthlyRent, yearsToRun, annualGrowthRate]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        Compare home ownership with renting\n      </header>\n      <form>\n        <Container>\n          <Row>\n            <Col>\n              <label>\n                <span>Purchase price</span>\n                <input type=\"number\" onChange={handleChange(setPurchasePrice)} value={purchasePrice} />\n              </label>\n            </Col>\n            <Col>\n              <label>\n                <span>Down payment (%)</span>\n                <input type=\"number\" onChange={handleChange(setDownPaymentPercent)} value={downPamentPercent} />\n              </label>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>\n                <span>Ammortization Period</span>\n                <input type=\"number\" onChange={handleChange(setAmmortizationPeriod)} value={ammortizationPeriod} />\n              </label>\n            </Col>\n            <Col>\n              <label>\n                <span>Mortgate Rate (%)</span>\n                <input type=\"number\" onChange={handleChange(setMortgageRate)} value={mortgageRate} />\n              </label>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>\n                <span>Annual Property Taxes</span>\n                <input type=\"number\" onChange={handleChange(setAnnualPropertyTaxes)} value={annualPropertyTaxes} />\n              </label>\n            </Col>\n            <Col>\n              <label>\n                <span>Strata Fees (monthly)</span>\n                <input type=\"number\" onChange={handleChange(setStrataFees)} value={strataFees} />\n              </label>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>\n                <span>Annual Maintenance</span>\n                <input type=\"number\" onChange={handleChange(setAnnualMaintenance)} value={annualMaintenance} />\n              </label>\n            </Col>\n            <Col/>\n          </Row>\n        </Container>\n        <Container>\n          <h1>Opportunity Costs</h1>\n          <Row>\n            <Col>\n              <label>\n                <span>Investment return (%)</span>\n                <input type=\"number\" onChange={handleChange(setInvestmentReturnPercentage)} value={investmentReturnPercentage} />\n              </label>\n            </Col>\n            <Col>\n              <label>\n                <span>Realtor Commission (% of sale)</span>\n                <input type=\"number\" onChange={handleChange(setRealtorCommissionPercent)} value={realtorCommissionPercent} />\n              </label>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>\n                <span>Comparable monthly rent</span>\n                <input type=\"number\" onChange={handleChange(setComparableMonthlyRent)} value={comparableMonthlyRent} />\n              </label>\n            </Col>\n            <Col/>\n          </Row>\n        </Container>\n        <Container>\n          <h1>Analysis details</h1>\n          <Row>\n            <Col>\n              <label>\n                <span>Years to run</span>\n                <input type=\"number\" onChange={handleChange(setYearsToRun)} value={yearsToRun} />\n              </label>\n            </Col>\n            <Col>\n              <label>\n                <span>Annual growth rate above inflation (%)</span>\n                <input type=\"number\" onChange={handleChange(setAnnualGrowthRate)} value={annualGrowthRate} />\n              </label>\n            </Col>\n          </Row>\n        </Container>\n      </form>\n      <hr/>\n      <Tabs>\n        { [0, 1,2,3,4].map(index =>\n          <Tab eventKey={index} title={\"Drawdown: \" + Math.round((1-drawdownRate[index])*100) + \"%\"}>\n            <Container>\n            <Row>\n              <Col>\n                <LineChart width={400} height={400} data={data[index]} margin={{top: 5, right: 20, bottom: 40, left: 20}}>\n                  <Line type=\"monotone\" dataKey=\"homeNetEquity\" stroke=\"#8884d8\" />\n                  <Line type=\"monotone\" dataKey=\"investmentNetEquity\" stroke=\"#82ca9d\" />\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Legend />\n                  <Tooltip />\n                </LineChart>\n              </Col>\n              <Col>\n                <Row>Annual house expense: {currencyFormatter.format(annualHouseExpense)}</Row>\n                <Row>Annual rent: {currencyFormatter.format(annualRent)}</Row>\n                <Row>Annual investment delta: {currencyFormatter.format(investmentDelta)}</Row>\n              </Col>\n            </Row>\n            </Container>\n          </Tab>\n        )}\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}