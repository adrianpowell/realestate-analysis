{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","purchasePrice","setPurchasePrice","downPaymentPercent","setDownPaymentPercent","ammortizationPeriod","setAmmortizationPeriod","mortgageRate","setMortgageRate","annualPropertyTaxes","setAnnualPropertyTaxes","strataFees","setStrataFees","annualMaintenance","setAnnualMaintenance","annualGrowthRate","setAnnualGrowthRate","drawdown","setDrawdown","realtorCommissionPercent","setRealtorCommissionPercent","investmentReturnPercentage","setInvestmentReturnPercentage","comparableMonthlyRent","setComparableMonthlyRent","annualRentIncrease","setAnnualRentIncrease","yearsToRun","setYearsToRun","data","setData","setAnnualHouseExpense","handleChange","Intl","NumberFormat","style","currency","setter","event","target","value","useEffect","console","log","i","downpayment","mortgage","mortgageRateDec","annualMortgagePayment","Math","pow","tmpAnnualHouseExpense","parseInt","currHousePrice","currRemainingMortgage","currInvestmentEquity","newData","totalInvestmentInterest","totalHouseHoldingCosts","totalHousingInterest","totalInvestmentSavings","currAnnualRent","yearRange","Array","keys","tmpInvestmentDelta","remainingLoanBalance","currHousingInterestPaid","currInvestmentInterest","currHouseEquity","push","name","investmentNetEquity","round","homeNetEquity","totalHousingInterestPaid","housePrice","investmentSavings","regenerateCharts","className","type","onChange","map","index","width","height","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","yearIndex","yearData","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAqPeA,MAjPf,WAAgB,IAAD,EAE6BC,mBAAS,MAFtC,mBAENC,EAFM,KAESC,EAFT,OAGmCF,mBAAS,IAH5C,mBAGVG,EAHU,KAGUC,EAHV,OAIqCJ,mBAAS,IAJ9C,mBAIVK,EAJU,KAIWC,EAJX,OAKuBN,mBAAS,GALhC,mBAKVO,EALU,KAKIC,EALJ,OAMqCR,mBAAS,KAN9C,mBAMVS,EANU,KAMWC,EANX,OAOmBV,mBAAS,KAP5B,mBAOVW,EAPU,KAOEC,EAPF,OAQiCZ,mBAAS,KAR1C,mBAQVa,EARU,KAQSC,EART,OAS+Bd,mBAAS,GATxC,mBASVe,EATU,KASQC,EATR,OAUehB,mBAAS,GAVxB,mBAUViB,EAVU,KAUAC,EAVA,OAa+ClB,mBAAS,GAbxD,mBAaVmB,EAbU,KAagBC,EAbhB,OAgBmDpB,mBAAS,KAhB5D,mBAgBVqB,EAhBU,KAgBkBC,EAhBlB,OAmByCtB,mBAAS,MAnBlD,mBAmBVuB,EAnBU,KAmBaC,EAnBb,OAoBmCxB,mBAAS,GApB5C,oBAoBVyB,GApBU,MAoBUC,GApBV,SAuBmB1B,mBAAS,IAvB5B,qBAuBV2B,GAvBU,MAuBEC,GAvBF,SA0BO5B,mBAAS,CAAC,KA1BjB,qBA0BV6B,GA1BU,MA0BJC,GA1BI,SA2BmC9B,mBAAS,GA3B5C,qBA2BU+B,IA3BV,aA+BPC,IAFoB,IAAIC,KAAKC,aAAa,QAC5C,CAACC,MAAO,WAAYC,SAAU,QACb,SAAAC,GAAM,OAAI,SAAAC,GAAK,OAAID,EAAOC,EAAMC,OAAOC,UAkE5DC,qBAAU,YAhEe,WACvBC,QAAQC,IAAI,wBAAyB9B,EAAmBJ,GACxD,IAaImC,EAbEC,EAAc5C,GAAiBE,EAAmB,KAElD2C,EAAY7C,EAAgB4C,EAC5BE,EAAkBxC,EAAa,IAE/ByC,EAAwBF,GAAYC,EAAkBE,KAAKC,IAAI,EAAIH,EAAiB1C,KACrF4C,KAAKC,IAAI,EAAIH,EAAiB1C,GAAuB,GAEtD8C,EAAyB,GAAKxC,GAC1BE,EAAwBuC,SAASvC,GAAb,IACpBJ,EAA0B2C,SAAS3C,GAAb,GAC9BsB,GAAsBoB,GAGtB,IAAIE,EAAiBpD,GAAiB,EAAc,EAATgB,EAAa,KACpDqC,EAAwBrD,EAAgB4C,EACxCU,EAAuBV,EACvBW,EAAU,GACVC,EAA0B,EAC1BC,EAAyB,EACzBC,EAAuB,EACvBC,EAAyB,EACzBC,EAAiB,GAAKtC,EAE1B,IADAuC,GAAS,YAAOC,MAAMpC,IAAYqC,QAC7BpB,EAAI,EAAGA,EAAIjB,GAAYiB,IAAK,CAE/BS,GAAmC,EAAOtC,EAAiB,IAC3D,IAAIkD,EAAqBd,EAAwBH,GAFjDa,GAAmC,EAAOpC,GAAmB,KAKvDyC,EAAuBpB,GACtBG,KAAKC,IAAI,EAAIH,EAAiB1C,GAAuB4C,KAAKC,IAAI,EAAIH,EAAiBH,KACnFK,KAAKC,IAAI,EAAIH,EAAiB1C,GAAuB,GAExD8D,EAA0BnB,GAAyBM,EAAwBY,GAC/EZ,EAAwBY,EACxBP,GAA8CQ,EAC9CT,GAAkDP,EAElD,IAAIiB,GAA0Bb,EAAuBU,IAAuB5C,EAA2B,KACvGkC,EAAwBA,EAAuBU,EAAsBG,EACrEX,GAAoDW,EACpDR,GAAkDK,EAElD,IAAII,EAAmBhB,EAAiBa,EACnCb,EAAiBlC,EAA2B,IAEjDqC,EAAQc,KAAK,CACXC,KAAM3B,EACN4B,oBAAqBvB,KAAKwB,MAAMlB,EAAqB,KACrDmB,cAAezB,KAAKwB,MAAMJ,EAAgB,KAC1CM,yBAA0BhB,EAC1BQ,wBAAyBA,EACzBS,WAAY3B,KAAKwB,MAAMpB,EAAe,KACtCK,uBAAwBA,EACxBmB,kBAAmBjB,EACnBH,wBAAyBA,IAG7B3B,GAAQ0B,GAIRsB,KACC,CAAC7E,EAAeE,EACfE,EAAqBE,EACrBE,EAAqBE,EACrBE,EAAmBI,EACnBI,EAA4BF,EAC5BI,EAAuBE,GACvBE,GAAYZ,IAEhB,IAAI+C,GAAS,YAAOC,MAAMpC,IAAYqC,QAEtC,OACE,sBAAKe,UAAU,MAAf,UACE,iCACE,oBAAIA,UAAU,YAAd,mDAEF,uBAAMA,UAAU,UAAhB,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,mDACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAa9B,GAAmBsC,MAAOvC,OAExE,sBAAK8E,UAAU,QAAf,UACE,oDACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAa5B,GAAwBoC,MAAOrC,UAG/E,sBAAK4E,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,yDACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAa1B,GAAyBkC,MAAOnC,OAE9E,sBAAK0E,UAAU,QAAf,UACE,sDACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAaxB,GAAkBgC,MAAOjC,UAGzE,sBAAKwE,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,0DACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAatB,GAAyB8B,MAAO/B,OAE9E,sBAAKsE,UAAU,QAAf,UACE,0DACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAapB,GAAgB4B,MAAO7B,UAGvE,sBAAKoE,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,uDACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAalB,GAAuB0B,MAAO3B,OAE5E,sBAAKkE,UAAU,QAAf,UACE,6CACA,wBAAQA,UAAU,oBAAoBvC,MAAOvB,EAAUgE,SAAU,SAAC3C,GAAD,OAAUpB,EAAYoB,EAAMC,OAAOC,QAApG,SACI,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAI0C,KAAI,SAAAC,GAC/C,OAAO,wBAAoB3C,MAAO2C,EAA3B,SAAmCA,GAAtBA,cAK5B,mDACA,sBAAKJ,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,0DACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAaV,GAAgCkB,MAAOnB,OAErF,sBAAK0D,UAAU,QAAf,UACE,mEACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAaZ,GAA8BoB,MAAOrB,UAGrF,sBAAK4D,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,4DACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAaR,GAA2BgB,MAAOjB,OAEhF,sBAAKwD,UAAU,QAAf,UACE,2DACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAaN,IAAwBc,MAAOf,WAG/E,kDACA,sBAAKsD,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,iDACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAaJ,IAAgBY,MAAOb,QAErE,sBAAKoD,UAAU,QAAf,UACE,2EACA,uBAAOC,KAAK,SAASC,SAAUjD,GAAahB,GAAsBwB,MAAOzB,aAI/E,uBACA,eAAC,IAAD,CAAWqE,MAAO,IAAKC,OAAQ,IAAKxD,KAAMA,GAAMyD,OAAQ,CAACC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAA9F,UACE,cAAC,IAAD,CAAMV,KAAK,WAAWW,QAAQ,gBAAgBC,OAAO,YACrD,cAAC,IAAD,CAAMZ,KAAK,WAAWW,QAAQ,sBAAsBC,OAAO,YAC3D,cAAC,IAAD,CAAeC,gBAAgB,QAC/B,cAAC,IAAD,CAAOF,QAAQ,SACf,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,OAEF,wBAAOZ,UAAU,kBAAjB,UACE,gCACE,+BACE,sCACA,kDACA,2DACA,oDACA,mDACA,8CACA,2DACA,8EAGJ,gCACEjB,GAAUoB,KAAI,SAAAY,GACd,IAAIC,EAAWlE,GAAKiE,GACpB,YAAiBE,IAAbD,EACK,uBAGP,+BACE,6BAAKA,EAASxB,OACd,mCAAMwB,EAASvB,oBAAf,OACA,mCAAMvB,KAAKwB,MAAMsB,EAAStC,wBAAwB,KAAlD,OACA,mCAAMR,KAAKwB,MAAMsB,EAASlB,kBAAkB,KAA5C,OACA,mCAAMkB,EAASnB,WAAf,OACA,mCAAMmB,EAASrB,iBACf,mCAAMzB,KAAKwB,MAAMsB,EAASpB,yBAAyB,KAAnD,OACA,mCAAM1B,KAAKwB,MAAMsB,EAASrC,uBAAuB,KAAjD,SAROoC,eCtNNG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.112d1b0c.chunk.js","sourcesContent":["import './App.css';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip} from 'recharts';\r\n\r\nfunction App() {\r\n\r\n  const [purchasePrice, setPurchasePrice] = useState(650000),\r\n    [downPaymentPercent, setDownPaymentPercent] = useState(20.0),\r\n    [ammortizationPeriod, setAmmortizationPeriod] = useState(20),\r\n    [mortgageRate, setMortgageRate] = useState(3.0),\r\n    [annualPropertyTaxes, setAnnualPropertyTaxes] = useState(2000),\r\n    [strataFees, setStrataFees] = useState(400),\r\n    [annualMaintenance, setAnnualMaintenance] = useState(1000),\r\n    [annualGrowthRate, setAnnualGrowthRate] = useState(0.0),\r\n    [drawdown, setDrawdown] = useState(0),\r\n    \r\n    // resale\r\n    [realtorCommissionPercent, setRealtorCommissionPercent] = useState(6.0),\r\n    \r\n    // opportunity cost\r\n    [investmentReturnPercentage, setInvestmentReturnPercentage] = useState(6.5),\r\n    \r\n    // rental comparison\r\n    [comparableMonthlyRent, setComparableMonthlyRent] = useState(2400),\r\n    [annualRentIncrease, setAnnualRentIncrease] = useState(0.0),\r\n\r\n    // analysis\r\n    [yearsToRun, setYearsToRun] = useState(20),\r\n\r\n    // results\r\n    [data, setData] = useState([[]]),\r\n    [annualHouseExpense, setAnnualHouseExpense] = useState(0.0);\r\n\r\n  const currencyFormatter = new Intl.NumberFormat('en-US',\r\n      {style: 'currency', currency: 'USD'});\r\n  const handleChange = setter => event => setter(event.target.value);\r\n\r\n  const regenerateCharts = () => {\r\n    console.log(\"regenerating charts: \", annualMaintenance, annualPropertyTaxes);\r\n    const downpayment = purchasePrice * (downPaymentPercent/100.0);\r\n\r\n    const mortgage = (purchasePrice - downpayment);\r\n    const mortgageRateDec = mortgageRate/100.0;\r\n    // https://www.mtgprofessor.com/formulas.htm\r\n    const annualMortgagePayment = mortgage * (mortgageRateDec * Math.pow(1 + mortgageRateDec, ammortizationPeriod)) /\r\n        (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - 1);\r\n\r\n    let tmpAnnualHouseExpense = (12 * strataFees)\r\n        + (!annualMaintenance ? 0 : parseInt(annualMaintenance))\r\n        + (!annualPropertyTaxes ? 0 : parseInt(annualPropertyTaxes));\r\n    setAnnualHouseExpense(tmpAnnualHouseExpense);\r\n\r\n    let i;\r\n    let currHousePrice = purchasePrice * (1.0-(drawdown*1.0/100.0));\r\n    let currRemainingMortgage = purchasePrice - downpayment;\r\n    let currInvestmentEquity = downpayment;\r\n    let newData = [];\r\n    let totalInvestmentInterest = 0;\r\n    let totalHouseHoldingCosts = 0;\r\n    let totalHousingInterest = 0;\r\n    let totalInvestmentSavings = 0;\r\n    let currAnnualRent = 12 * comparableMonthlyRent;\r\n    yearRange = [...Array(yearsToRun).keys()];\r\n    for (i = 1; i < yearsToRun; i++) {\r\n      currAnnualRent = currAnnualRent * (1.0 + (annualRentIncrease/100.0));\r\n      currHousePrice = currHousePrice * (1.0 + (annualGrowthRate/100.0));\r\n      let tmpInvestmentDelta = tmpAnnualHouseExpense + annualMortgagePayment - (currAnnualRent);\r\n\r\n      // https://www.mtgprofessor.com/formulas.htm\r\n      const remainingLoanBalance = mortgage\r\n          * (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - Math.pow(1 + mortgageRateDec, i))\r\n          / (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - 1);\r\n      // the difference between what we paid and how much loan decreases\r\n      let currHousingInterestPaid = annualMortgagePayment - (currRemainingMortgage - remainingLoanBalance);\r\n      currRemainingMortgage = remainingLoanBalance;\r\n      totalHousingInterest = totalHousingInterest + currHousingInterestPaid;\r\n      totalHouseHoldingCosts = totalHouseHoldingCosts + tmpAnnualHouseExpense;\r\n\r\n      let currInvestmentInterest = (currInvestmentEquity + tmpInvestmentDelta) * (investmentReturnPercentage/100.0);\r\n      currInvestmentEquity = (currInvestmentEquity + tmpInvestmentDelta) + currInvestmentInterest;\r\n      totalInvestmentInterest = totalInvestmentInterest + currInvestmentInterest;\r\n      totalInvestmentSavings = totalInvestmentSavings + tmpInvestmentDelta;\r\n\r\n      let currHouseEquity = (currHousePrice - remainingLoanBalance) -\r\n          (currHousePrice * realtorCommissionPercent / 100.0);\r\n\r\n      newData.push({\r\n        name: i,\r\n        investmentNetEquity: Math.round(currInvestmentEquity/1000),\r\n        homeNetEquity: Math.round(currHouseEquity/1000),\r\n        totalHousingInterestPaid: totalHousingInterest,\r\n        currHousingInterestPaid: currHousingInterestPaid,\r\n        housePrice: Math.round(currHousePrice/1000),\r\n        totalHouseHoldingCosts: totalHouseHoldingCosts,\r\n        investmentSavings: totalInvestmentSavings,\r\n        totalInvestmentInterest: totalInvestmentInterest\r\n      });\r\n    }\r\n    setData(newData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    regenerateCharts();\r\n  }, [purchasePrice, downPaymentPercent,\r\n      ammortizationPeriod, mortgageRate,\r\n      annualPropertyTaxes, strataFees,\r\n      annualMaintenance, drawdown,\r\n      investmentReturnPercentage, realtorCommissionPercent,\r\n      comparableMonthlyRent, annualRentIncrease,\r\n      yearsToRun, annualGrowthRate]);\r\n\r\n  let yearRange = [...Array(yearsToRun).keys()];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1 className=\"ui header\">Compare home ownership with renting</h1>\r\n      </header>\r\n      <form className=\"ui form\">\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Purchase price</label>\r\n            <input type=\"number\" onChange={handleChange(setPurchasePrice)} value={purchasePrice} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Downpayment (%)</label>\r\n            <input type=\"number\" onChange={handleChange(setDownPaymentPercent)} value={downPaymentPercent} />\r\n          </div>\r\n        </div>\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Ammortization Period</label>\r\n            <input type=\"number\" onChange={handleChange(setAmmortizationPeriod)} value={ammortizationPeriod} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Mortgate Rate (%)</label>\r\n            <input type=\"number\" onChange={handleChange(setMortgageRate)} value={mortgageRate} />\r\n          </div>\r\n        </div>\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Annual Property Taxes</label>\r\n            <input type=\"number\" onChange={handleChange(setAnnualPropertyTaxes)} value={annualPropertyTaxes} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Strata Fees (monthly)</label>\r\n            <input type=\"number\" onChange={handleChange(setStrataFees)} value={strataFees} />\r\n          </div>\r\n        </div>\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Annual Maintenance</label>\r\n            <input type=\"number\" onChange={handleChange(setAnnualMaintenance)} value={annualMaintenance} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Drawdown</label>\r\n            <select className=\"ui fluid dropdown\" value={drawdown} onChange={(event)=> setDrawdown(event.target.value)}>\r\n              { [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50].map(index => {\r\n                return(<option key={index} value={index}>{index}</option>);\r\n              })}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <h4>Opportunity Costs</h4>\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Investment return (%)</label>\r\n            <input type=\"number\" onChange={handleChange(setInvestmentReturnPercentage)} value={investmentReturnPercentage} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Realtor Commission (% of sale)</label>\r\n            <input type=\"number\" onChange={handleChange(setRealtorCommissionPercent)} value={realtorCommissionPercent} />\r\n          </div>\r\n        </div>\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Comparable monthly rent</label>\r\n            <input type=\"number\" onChange={handleChange(setComparableMonthlyRent)} value={comparableMonthlyRent} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Annual rent increase %</label>\r\n            <input type=\"number\" onChange={handleChange(setAnnualRentIncrease)} value={annualRentIncrease} />\r\n          </div>\r\n        </div>\r\n        <h4>Analysis details</h4>\r\n        <div className=\"two fields\">\r\n          <div className=\"field\">\r\n            <label>Years to run</label>\r\n            <input type=\"number\" onChange={handleChange(setYearsToRun)} value={yearsToRun} />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Annual growth rate above inflation (%)</label>\r\n            <input type=\"number\" onChange={handleChange(setAnnualGrowthRate)} value={annualGrowthRate} />\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <hr/>\r\n      <LineChart width={400} height={400} data={data} margin={{top: 5, right: 20, bottom: 40, left: 20}}>\r\n        <Line type=\"monotone\" dataKey=\"homeNetEquity\" stroke=\"#8884d8\" />\r\n        <Line type=\"monotone\" dataKey=\"investmentNetEquity\" stroke=\"#82ca9d\" />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Legend />\r\n        <Tooltip />\r\n      </LineChart>\r\n      <table className=\"ui celled table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Year</th>\r\n            <th>Investment total</th>\r\n            <th>Investment total interest</th>\r\n            <th>Investment savings</th>\r\n            <th>House total value</th>\r\n            <th>House equity</th>\r\n            <th>House total interest paid</th>\r\n            <th>House total holding costs (ex mortgage)</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        { yearRange.map(yearIndex => {\r\n          let yearData = data[yearIndex];\r\n          if (yearData === undefined) {\r\n            return(<tr></tr>)\r\n          }\r\n          return(\r\n            <tr key={yearIndex}>\r\n              <td>{yearData.name}</td>\r\n              <td>${yearData.investmentNetEquity}k</td>\r\n              <td>${Math.round(yearData.totalInvestmentInterest/1000)}k</td>\r\n              <td>${Math.round(yearData.investmentSavings/1000)}k</td>\r\n              <td>${yearData.housePrice}k</td>\r\n              <td>${yearData.homeNetEquity}</td>\r\n              <td>${Math.round(yearData.totalHousingInterestPaid/1000)}k</td>\r\n              <td>${Math.round(yearData.totalHouseHoldingCosts/1000)}k</td>\r\n            </tr>\r\n            )\r\n          })\r\n        }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}