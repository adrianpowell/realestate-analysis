{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tableStyle","border","borderCollapse","tableHeaderCellStyle","padding","tableCellStyle","useState","purchasePrice","setPurchasePrice","downPamentPercent","setDownPaymentPercent","ammortizationPeriod","setAmmortizationPeriod","mortgageRate","setMortgageRate","annualPropertyTaxes","setAnnualPropertyTaxes","strataFees","setStrataFees","annualMaintenance","setAnnualMaintenance","annualGrowthRate","setAnnualGrowthRate","realtorCommissionPercent","setRealtorCommissionPercent","investmentReturnPercentage","setInvestmentReturnPercentage","comparableMonthlyRent","setComparableMonthlyRent","yearsToRun","setYearsToRun","data","setData","annualHouseExpense","setAnnualHouseExpense","annualRent","setAnnualRent","investmentDelta","setInvestmentDelta","drawdownRate","currencyFormatter","Intl","NumberFormat","style","currency","handleChange","setter","event","target","value","useEffect","console","log","downpayment","mortgage","mortgageRateDec","annualMortgagePayment","Math","pow","tmpAnnualHouseExpense","i","tmpInvestmentDelta","newStateData","map","drawdown","currHousePrice","currRemainingMortgage","currInvestmentEquity","newData","totalInvestmentInterest","totalHouseHoldingCosts","totalHousingInterest","totalInvestmentSavings","yearRange","Array","keys","remainingLoanBalance","currHousingInterestPaid","currInvestmentInterest","currHouseEquity","push","name","investmentNetEquity","round","homeNetEquity","totalHousingInterestPaid","housePrice","investmentSavings","regenerateCharts","className","Container","Row","Col","type","onChange","Tabs","index","undefined","length","Tab","eventKey","title","width","height","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","format","yearIndex","yearData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2f16b6d.chunk.js","sourcesContent":["import './App.css';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {Col, Container, Row, Tab, Tabs} from \"react-bootstrap\";\r\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip} from 'recharts';\r\n\r\nfunction App() {\r\n\r\n  const tableStyle = {\r\n    border: \"1px solid black\",\r\n    borderCollapse: \"collapse\"\r\n  }\r\n  const tableHeaderCellStyle = {\r\n    border: \"1px solid black\",\r\n    padding: \"3px\"\r\n  }\r\n  const tableCellStyle = {\r\n    border: \"1px solid black\"\r\n  }\r\n\r\n  const [purchasePrice, setPurchasePrice] = useState(650000),\r\n    [downPamentPercent, setDownPaymentPercent] = useState(20.0),\r\n    [ammortizationPeriod, setAmmortizationPeriod] = useState(20),\r\n    [mortgageRate, setMortgageRate] = useState(3.0),\r\n    [annualPropertyTaxes, setAnnualPropertyTaxes] = useState(2000),\r\n    [strataFees, setStrataFees] = useState(400),\r\n    [annualMaintenance, setAnnualMaintenance] = useState(1000),\r\n    [annualGrowthRate, setAnnualGrowthRate] = useState(0.0),\r\n    \r\n    // resale\r\n    [realtorCommissionPercent, setRealtorCommissionPercent] = useState(6.0),\r\n    \r\n    // opportunity cost\r\n    [investmentReturnPercentage, setInvestmentReturnPercentage] = useState(6.5),\r\n    \r\n    // rental comparison\r\n    [comparableMonthlyRent, setComparableMonthlyRent] = useState(2400),\r\n\r\n    // analysis\r\n    [yearsToRun, setYearsToRun] = useState(20),\r\n\r\n    // results\r\n    [data, setData] = useState([[]]),\r\n    [annualHouseExpense, setAnnualHouseExpense] = useState(0.0),\r\n    [annualRent, setAnnualRent] = useState(0.0),\r\n    [investmentDelta, setInvestmentDelta] = useState(0.0);\r\n\r\n  const drawdownRate = [1, 0.95, 0.9, 0.8, 0.7];\r\n  const currencyFormatter = new Intl.NumberFormat('en-US',\r\n      {style: 'currency', currency: 'USD'});\r\n  const handleChange = setter => event => setter(event.target.value);\r\n\r\n  function regenerateCharts() {\r\n    console.log(\"regenerating chart data, annual taxes:\", annualPropertyTaxes);\r\n    const downpayment = purchasePrice * (downPamentPercent/100.0);\r\n\r\n    const mortgage = (purchasePrice - downpayment);\r\n    const mortgageRateDec = mortgageRate/100.0;\r\n    // https://www.mtgprofessor.com/formulas.htm\r\n    const annualMortgagePayment = mortgage * (mortgageRateDec * Math.pow(1 + mortgageRateDec, ammortizationPeriod)) /\r\n        (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - 1);\r\n\r\n    let tmpAnnualHouseExpense = (12 * strataFees) + annualMaintenance + annualPropertyTaxes;\r\n    console.log(\"annual house expense: \", tmpAnnualHouseExpense, annualPropertyTaxes, (12 * strataFees),\r\n        annualMaintenance, annualMortgagePayment);\r\n    setAnnualHouseExpense(tmpAnnualHouseExpense);\r\n    setAnnualRent(12 * comparableMonthlyRent);\r\n    let tmpInvestmentDelta = tmpAnnualHouseExpense + annualMortgagePayment - (12*comparableMonthlyRent);\r\n    setInvestmentDelta(tmpInvestmentDelta);\r\n\r\n    //let newData = [];\r\n    let i;\r\n    let newStateData = drawdownRate.map(drawdown => {\r\n      let currHousePrice = purchasePrice * drawdown;\r\n      let currRemainingMortgage = purchasePrice - downpayment;\r\n      let currInvestmentEquity = downpayment;\r\n      let newData = [];\r\n      let totalInvestmentInterest = 0;\r\n      let totalHouseHoldingCosts = 0;\r\n      let totalHousingInterest = 0;\r\n      let totalInvestmentSavings = 0;\r\n      yearRange = [...Array(yearsToRun).keys()];\r\n      for (i = 1; i < yearsToRun; i++) {\r\n        currHousePrice = currHousePrice * (1.0 + (annualGrowthRate/100.0));\r\n\r\n        // https://www.mtgprofessor.com/formulas.htm\r\n        const remainingLoanBalance = mortgage\r\n            * (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - Math.pow(1 + mortgageRateDec, i))\r\n            / (Math.pow(1 + mortgageRateDec, ammortizationPeriod) - 1);\r\n        // the difference between what we paid and how much loan decreases\r\n        let currHousingInterestPaid = annualMortgagePayment - (currRemainingMortgage - remainingLoanBalance);\r\n        currRemainingMortgage = remainingLoanBalance;\r\n        totalHousingInterest = totalHousingInterest + currHousingInterestPaid;\r\n        totalHouseHoldingCosts = totalHouseHoldingCosts + tmpAnnualHouseExpense;\r\n\r\n        let currInvestmentInterest = (currInvestmentEquity + tmpInvestmentDelta) * (investmentReturnPercentage/100.0);\r\n        currInvestmentEquity = (currInvestmentEquity + tmpInvestmentDelta) + currInvestmentInterest;\r\n        totalInvestmentInterest = totalInvestmentInterest + currInvestmentInterest;\r\n        totalInvestmentSavings = totalInvestmentSavings + tmpInvestmentDelta;\r\n\r\n        let currHouseEquity = (currHousePrice - remainingLoanBalance) -\r\n            (currHousePrice * realtorCommissionPercent / 100.0);\r\n\r\n        newData.push({\r\n          name: i,\r\n          investmentNetEquity: Math.round(currInvestmentEquity/1000),\r\n          homeNetEquity: Math.round(currHouseEquity/1000),\r\n          totalHousingInterestPaid: totalHousingInterest,\r\n          currHousingInterestPaid: currHousingInterestPaid,\r\n          housePrice: Math.round(currHousePrice/1000),\r\n          totalHouseHoldingCosts: totalHouseHoldingCosts,\r\n          investmentSavings: totalInvestmentSavings,\r\n          totalInvestmentInterest: totalInvestmentInterest\r\n        });\r\n      }\r\n      return newData;\r\n    });\r\n    console.log('Updating data: ', newStateData);\r\n    setData(newStateData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    regenerateCharts();\r\n  }, [purchasePrice, ammortizationPeriod, mortgageRate, annualPropertyTaxes, strataFees, annualMaintenance,\r\n  realtorCommissionPercent, investmentReturnPercentage, comparableMonthlyRent, yearsToRun, annualGrowthRate]);\r\n\r\n  let yearRange = [...Array(yearsToRun).keys()];\r\n\r\n  // let tableData = this.state.data.map((yearData) =>\r\n  //   <tr>\r\n  //     <td>{yearData.name}</td>\r\n  //     <td>{yearData.investmentNetEquity}</td>\r\n  //   </tr>\r\n  // );\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        Compare home ownership with renting\r\n      </header>\r\n      <form>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Purchase price</span>\r\n                <input type=\"number\" onChange={handleChange(setPurchasePrice)} value={purchasePrice} />\r\n              </label>\r\n            </Col>\r\n            <Col>\r\n              <label>\r\n                <span>Down payment (%)</span>\r\n                <input type=\"number\" onChange={handleChange(setDownPaymentPercent)} value={downPamentPercent} />\r\n              </label>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Ammortization Period</span>\r\n                <input type=\"number\" onChange={handleChange(setAmmortizationPeriod)} value={ammortizationPeriod} />\r\n              </label>\r\n            </Col>\r\n            <Col>\r\n              <label>\r\n                <span>Mortgate Rate (%)</span>\r\n                <input type=\"number\" onChange={handleChange(setMortgageRate)} value={mortgageRate} />\r\n              </label>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Annual Property Taxes</span>\r\n                <input type=\"number\" onChange={handleChange(setAnnualPropertyTaxes)} value={annualPropertyTaxes} />\r\n              </label>\r\n            </Col>\r\n            <Col>\r\n              <label>\r\n                <span>Strata Fees (monthly)</span>\r\n                <input type=\"number\" onChange={handleChange(setStrataFees)} value={strataFees} />\r\n              </label>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Annual Maintenance</span>\r\n                <input type=\"number\" onChange={handleChange(setAnnualMaintenance)} value={annualMaintenance} />\r\n              </label>\r\n            </Col>\r\n            <Col/>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <h1>Opportunity Costs</h1>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Investment return (%)</span>\r\n                <input type=\"number\" onChange={handleChange(setInvestmentReturnPercentage)} value={investmentReturnPercentage} />\r\n              </label>\r\n            </Col>\r\n            <Col>\r\n              <label>\r\n                <span>Realtor Commission (% of sale)</span>\r\n                <input type=\"number\" onChange={handleChange(setRealtorCommissionPercent)} value={realtorCommissionPercent} />\r\n              </label>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Comparable monthly rent</span>\r\n                <input type=\"number\" onChange={handleChange(setComparableMonthlyRent)} value={comparableMonthlyRent} />\r\n              </label>\r\n            </Col>\r\n            <Col/>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <h1>Analysis details</h1>\r\n          <Row>\r\n            <Col>\r\n              <label>\r\n                <span>Years to run</span>\r\n                <input type=\"number\" onChange={handleChange(setYearsToRun)} value={yearsToRun} />\r\n              </label>\r\n            </Col>\r\n            <Col>\r\n              <label>\r\n                <span>Annual growth rate above inflation (%)</span>\r\n                <input type=\"number\" onChange={handleChange(setAnnualGrowthRate)} value={annualGrowthRate} />\r\n              </label>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </form>\r\n      <hr/>\r\n      <Tabs>\r\n        { [0, 1, 2, 3, 4].map(index => {\r\n          console.log('data[index]', data[index]);\r\n          if (data[index] === undefined || data[index].length === 0) {\r\n            return (<div></div>)\r\n          }\r\n          return (\r\n            <Tab eventKey={index} title={\"Drawdown: \" + Math.round((1-drawdownRate[index])*100) + \"%\"}>\r\n            <Container>\r\n            <Row>\r\n              <Col>\r\n                <LineChart width={400} height={400} data={data[index]} margin={{top: 5, right: 20, bottom: 40, left: 20}}>\r\n                  <Line type=\"monotone\" dataKey=\"homeNetEquity\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"investmentNetEquity\" stroke=\"#82ca9d\" />\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"name\" />\r\n                  <YAxis />\r\n                  <Legend />\r\n                  <Tooltip />\r\n                </LineChart>\r\n              </Col>\r\n              <Col>\r\n                <Row>Annual house expense: {currencyFormatter.format(annualHouseExpense)}</Row>\r\n                <Row>Annual rent: {currencyFormatter.format(annualRent)}</Row>\r\n                <Row>Annual investment delta: {currencyFormatter.format(investmentDelta)}</Row>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <table style={tableStyle}>\r\n                <thead>\r\n                  <tr>\r\n                    <th style={tableHeaderCellStyle}>Year</th>\r\n                    <th style={tableHeaderCellStyle}>Investment total</th>\r\n                    <th style={tableHeaderCellStyle}>Investment total interest</th>\r\n                    <th style={tableHeaderCellStyle}>Investment savings</th>\r\n                    <th style={tableHeaderCellStyle}>House total value</th>\r\n                    <th style={tableHeaderCellStyle}>House equity</th>\r\n                    <th style={tableHeaderCellStyle}>House total interest paid</th>\r\n                    <th style={tableHeaderCellStyle}>House total holding costs (ex mortgage)</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                { yearRange.map(yearIndex => {\r\n                  let yearData = data[index][yearIndex];\r\n                  console.log('yearData', yearData);\r\n                  if (yearData === undefined) {\r\n                    return(<tr></tr>)\r\n                  }\r\n                  return(\r\n                    <tr key={yearIndex}>\r\n                      <td style={tableCellStyle}>{yearData.name}</td>\r\n                      <td style={tableCellStyle}>${yearData.investmentNetEquity}k</td>\r\n                      <td style={tableCellStyle}>${Math.round(yearData.totalInvestmentInterest/1000)}k</td>\r\n                      <td style={tableCellStyle}>${Math.round(yearData.investmentSavings/1000)}k</td>\r\n                      <td style={tableCellStyle}>${yearData.housePrice}k</td>\r\n                      <td style={tableCellStyle}>${yearData.homeNetEquity}</td>\r\n                      <td style={tableCellStyle}>${Math.round(yearData.totalHousingInterestPaid/1000)}k</td>\r\n                      <td style={tableCellStyle}>${Math.round(yearData.totalHouseHoldingCosts/1000)}k</td>\r\n                    </tr>\r\n                    )\r\n                  })\r\n                }\r\n                </tbody>\r\n              </table>\r\n            </Row>\r\n            </Container>\r\n          </Tab>\r\n          )\r\n        }\r\n        )}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}